import{_ as e,o as r,c as o,a as i}from"./app-fb7751c8.js";const s={},t=i('<h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><p><strong>promise对象仅有三种状态</strong></p><ul><li>pending（进行中）</li><li>fulfilled（已成功）</li><li>rejected（已失败）</li></ul><p><strong>用法</strong></p><p>Promise对象是一个构造函数，用来生成Promise实例</p><p><code>const promise = new Promise(function(resolve, reject) {});</code></p><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject</p><ul><li>resolve函数的作用是，将Promise对象的状态从“未完成”变为“成功”</li><li>reject函数的作用是，将Promise对象的状态从“未完成”变为“失败”</li></ul><p><strong>实例方法</strong></p><p>Promise构建出来的实例存在以下方法：</p><ul><li>then()</li><li>catch()</li><li>finally()</li></ul><p><strong>then()</strong></p><p>then是实例状态发生改变时的回调函数，第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数</p><p>then方法返回的是一个新的Promise实例，也就是promise能链式书写的原因</p>',14),l=[t];function n(c,p){return r(),o("div",null,l)}const m=e(s,[["render",n],["__file","a14.html.vue"]]);export{m as default};
